from aiogram import F, Router
from aiogram.types import Message
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext

from app.cache import cached_data
from app.database.db import async_session
from app.database.models import User
from app.keyboards import inline_cars, main_menu_keyboard
from app.utils import get_all_cars
from app.user_states import CarReg


handler_router = Router()


@handler_router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_exists = True

    async with async_session() as session:
        user = await session.get(User, user_id)

        if not user:
            username = message.from_user.username
            first_name = message.from_user.first_name
            last_name = message.from_user.last_name
            new_user = User(
                telegram_id=user_id,
                username=username,
                first_name=first_name,
                last_name=last_name
            )
            session.add(new_user)
            await session.commit()
            user_exists = False
            cached_data['user_id'] = user_id
            cached_data['first_name'] = first_name

    msg_text = f'–í—ã {'—É–∂–µ' if user_exists else ''} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.'
    await message.answer(msg_text)

    if not user_exists:
        await state.set_state(CarReg.name)
        await message.answer('–ü–æ –∫–∞–∫–æ–º—É –∞–≤—Ç–æ–º–æ–±–∏–ª—é —Ö–æ—á–µ—à—å'
                             ' –∑–∞–≤–µ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–Ω—É—é –∫–Ω–∏–≥—Éüìï? '
                             '–í –¥–∞–ª—å–Ω–µ–π—à–µ–º –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞'
                             '–≤–∏—Ç—å –µ—â–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏. –î–ª—è '
                             '–Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π '
                             '–∫–æ–º–∞–Ω–¥—É <b>/menu</b>', parse_mode='Html')


@handler_router.message(Command('menu'))
async def main_handler(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.',
                         reply_markup=main_menu_keyboard)


@handler_router.message(F.text == '‚úÖ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å')
async def add_car_handler(message: Message, state: FSMContext):
    name = message.from_user.first_name
    await message.answer(f'{name}, –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.')
    await state.set_state(CarReg.name)
    cached_data['user_id'] = message.from_user.id
    cached_data['first_name'] = name


@handler_router.message(F.text == 'üöò –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏')
async def show_cars_handler(message: Message):
    user_id = message.from_user.id
    cars = await get_all_cars(user_id)
    if not cars:
        await message.answer('–£ —Ç–µ–±—è –Ω–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.')
    else:
        await message.answer('–¢–≤–æ–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏.',
                             reply_markup=await inline_cars(cars, user_id))


@handler_router.message(lambda m: m.text.lower() in {'menu', 'men',
                                                     '–º–µ–Ω—é', '–º–µ–Ω'})
async def menu_words_handler(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.',
                         reply_markup=main_menu_keyboard)


@handler_router.message(StateFilter(None))
async def any_words_handler(message: Message):
    if message.text not in {'‚Ü©Ô∏è –ù–∞–∑–∞–¥',
                            '‚úÖ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å',
                            'üöò –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏'}:
        await message.reply('‚ùóÔ∏è–Ø –Ω–µ –ø–æ–Ω—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.‚ùóÔ∏è\n'
                            '–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É <b>/menu</b>. '
                            '–¢–∞–º –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Ç–µ–±—è.',
                            parse_mode='Html')
